{"version":3,"file":"route_definition.js","sourceRoot":"","sources":["../../src/route_definition.ts"],"names":[],"mappings":"","sourcesContent":["import {Type} from '../src/facade/lang';\nimport {RegexSerializer} from './rules/route_paths/regex_route_path';\n\n/**\n * `RouteDefinition` defines a route within a {@link RouteConfig} decorator.\n *\n * Supported keys:\n * - `path` or `aux` (requires exactly one of these)\n * - `component`, `loader`,  `redirectTo` (requires exactly one of these)\n * - `name` or `as` (optional) (requires exactly one of these)\n * - `data` (optional)\n *\n * See also {@link Route}, {@link AsyncRoute}, {@link AuxRoute}, and {@link Redirect}.\n */\nexport interface RouteDefinition {\n  path?: string;\n  aux?: string;\n  regex?: string;\n  serializer?: RegexSerializer;\n  component?: Type | ComponentDefinition;\n  loader?: () => Promise<Type>;\n  redirectTo?: any[];\n  as?: string;\n  name?: string;\n  data?: any;\n  useAsDefault?: boolean;\n  defer?: Defer;\n}\n\n/**\n * Represents either a component type (`type` is `component`) or a loader function\n * (`type` is `loader`).\n *\n * See also {@link RouteDefinition}.\n */\nexport interface ComponentDefinition {\n  type: string;\n  loader?: () => Promise<Type>;\n  component?: Type;\n}\n\nexport interface Defer {\n  [key: string]: DeferredFactory;\n}\n\n/**\n * An object which needs to be resolved until we are able to render the route component.\n *\n * @example\n * const baz: DeferredFactory = { resolve: () => Promise.resolve(), deps: [] };\n */\nexport interface DeferredFactory {\n  resolve: (...deps: any[]) => Promise<any>;\n  deps?: any[];\n}\n\n"]}